version: 2.1

orbs:
  nix: eld/nix@1.1.1

executors:
  nix-machine:
    machine:
      image: ubuntu-2204:current  # Full VM with more privileges than docker executor
    working_directory: ~/repo
 
jobs:
  setup:
    executor: nix-machine
    steps:
      - checkout
      - nix/install
      - run:
          name: Install Copier
          command: |
            nix profile add nixpkgs#copier

      - run:
          name: Generate default answers.yml
          command: |
            cat \<<EOF > answers.yml
            codeserver: false
            cudaSupport: false
            framework: fhs
            i_know_what_i_am_doing: false
            python_package_manager: pixi
            python_version: "3.11"
            shell: bash
            EOF

      - run:
          name: Run copier to scaffold project
          command: |
            copier copy --force --trust --data-file answers.yml . $PWD/generated/

      - run:
          name: Generate flake.lock
          command: |
            cd generated && nix flake lock && git add flake.lock

      - persist_to_workspace:
          root: generated
          paths:
            - flake.lock

  test:
    executor: nix-machine
    parameters:
      package_manager: 
        type: enum
        default: pixi
        enum: [pixi, micromamba, uv]
      python_version:
        type: string
        default: "3.10"
      shell:
        type: enum
        default: zsh
        enum: [bash, zsh, fish]
    steps:
      - checkout

      - attach_workspace:
          at: ~/repo/generated

      - nix/install
      
      - run:
          name: Install Copier
          command: |
            nix profile add nixpkgs#copier

      - run:
          name: Generate answers.yml
          command: |
            cat \<<EOF > answers.yml
            codeserver: false
            cudaSupport: false
            framework: fhs
            i_know_what_i_am_doing: false
            declarative_python_environment: true
            python_packages: numpy
            python_package_manager: << parameters.package_manager >>
            python_version: "<< parameters.python_version >>"
            shell: << parameters.shell >>
            EOF

      - run:
          name: Run Copier
          command: |
            copier copy --force --trust --data-file answers.yml . $PWD/generated/
      - run:
          name: Generate test.sh
          command: |
            cd generated
            cat \<<EOF > test.sh
            #!/usr/bin/env -S nix run --no-update-lock-file .# --

            echo "$(which python)"
            python --version
            
            python -c "import numpy" && echo "numpy import successful" || { echo "numpy import failed"; exit 1; }
            EOF
            chmod +x test.sh

      - run:
          name: Test with nix develop
          command: |
            cd generated
            git add flake.lock
            ./test.sh
            
  commit-lockfile:
    executor: docker
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/generated

      - run:
          name: Configure Git
          command: |
            git config user.email "circleci@circleci.com"
            git config user.name "CircleCI"

      - run:
          name: Create pull request with updated flake.lock
          command: |
            cp ~/repo/generated/flake.lock templates/fhs/flake.lock.jinja
            
            git config --global user.name "CI Bot"
            git config --global user.email "ci@example.com"
            
            BRANCH_NAME=update-flake-lock-$(date +%s)
            git checkout -b "$BRANCH_NAME"
            git add templates/fhs/flake.lock.jinja
            
            if git diff --cached --quiet; then
              echo "No changes to commit"
              exit 0
            fi
            
            git commit -m "Update flake.lock from CI [skip ci]"
            git push origin "$BRANCH_NAME"
            
            # Install GitHub CLI if not present (Ubuntu-based)
            if ! command -v gh &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y gh
            fi
            
            gh auth login --with-token \<<< "$GH_TOKEN"
            gh pr create \
              --title "Update flake.lock from CI [skip ci]" \
              --body "Automated PR from CircleCI." \
              --base main \
              --head "$BRANCH_NAME"

workflows:
  version: 2
  test-template:
    jobs:
      - setup
      - test:
          matrix:
            parameters:
              package_manager: [pixi]
              python_version: ["3.11"]
              shell: ["bash"]
          requires:
            - setup
      - commit-lockfile:
          requires:
            - test
