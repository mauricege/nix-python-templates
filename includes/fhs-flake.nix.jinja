{
  description = ''FHS-compatible development shell with CUDAtemplates. Should make things "just work" for most users.'';

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    flake-utils.url = "github:numtide/flake-utils";
  };

  outputs = {
    self,
    nixpkgs,
    flake-utils,
    ...
  }:
    flake-utils.lib.eachSystem ["x86_64-linux" "aarch64-linux"] (
      system: let
        pkgs = import nixpkgs {
          inherit system;
          config.allowUnfree = true;
          cudaSupport = true;
        };
        {%- if declarative_python_environment %}
        {%- if python_package_manager == "micromamba" %}
        pythonInstall = ''
          set -e
           if micromamba env list | grep -qw "$MAMBA_ROOT_PREFIX/envs/{{ project_name }}"; then
            echo "Updating environment {{ project_name }}..."
            micromamba install -q -y -f environment.yml
          else
            echo "Creating environment {{ project_name }}..."
            micromamba create -q -y -f environment.yml
          fi
          set +e
        '';
        pythonActivate = ''
          set -e
          {% if shell == "fish" %}
          eval $(micromamba shell hook --shell=fish)
          {% elif shell == "zsh" or shell == "bash" %}
          eval "$(micromamba shell hook --shell={{ shell }} | sed 's/complete / # complete/g')"
          {% endif %}
          micromamba activate {{ project_name }}
          set +e
        '';
        {%- elif python_package_manager == "uv" %}
        pythonInstall = ''
          set -e
          uv venv --python {{ python_version }} --allow-existing --managed-python
          uv sync{%- if install_flash_attention %} --extra flash_attention_build{% endif %}
          {%- if install_flash_attention %}
          # we need two uv syncs here - first to install flash-attention's build dependencies and then to compile it
          uv sync --extra flash_attention_build --extra flash_attention_compile
          {%- endif %}
          set +e
        '';
        pythonActivate = "source {{ _copier_conf.dst_path.as_posix () }}/.venv/bin/activate";
        {%- elif python_package_manager == "pixi" %}
        pythonInstall = "";
        pythonActivate = ''eval "$(pixi shell-hook -s {{ shell }})"'';
        {%- endif %}
        {%- endif %}
        fhsEnv = pkgs.buildFHSEnv (pkgs.appimageTools.defaultFhsEnvArgs
          // {
            name = "{{ project_name }}-fhs";
            targetPkgs = pkgs: (with pkgs; [
              {{ python_package_manager }}

              # makes shell more pleasant to use
              fzf
              zoxide

              {%- if codeserver %}
              # code server inside fhs
              openvscode-server
              {%- endif %}

              # shells
              {{ shell }}
            ]);
            profile = ''
              export CUDA_PATH="${pkgs.cudatoolkit}"
              export EXTRA_CCFLAGS="-I/usr/include"
              {%- if python_package_manager == 'micromamba' %}
              export MAMBA_ROOT_PREFIX="''${MAMBA_ROOT_PREFIX:-{{ _copier_conf.dst_path.as_posix() }}/.micromamba}"
              {%- endif %}
              {%- if declarative_python_environment %}
              ${pythonInstall}
              {%- if shell == "zsh" or shell == "bash" %}
              ${pythonActivate}
              {%- elif shell == "fish" %}
              {%- endif %}
              {%- endif %}
            '';
            runScript = "{%- if shell == "fish" %}fish{%- if declarative_python_environment %} -C \"${pythonActivate}\"{%- endif %}{%- elif shell == "zsh" or shell == "bash" %}{{ shell }}{%- endif %}";
          });
      in {
        devShells.default = fhsEnv.env.overrideAttrs (old: {
          name = "{{ project_name }}";
        });
        apps.default = {
          type = "app";
          program = "${fhsEnv}/bin/${fhsEnv.name}";
        };
      }
    );
}
