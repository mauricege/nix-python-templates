project_name:
  type: str
  help: "Name of the environment:"
  default: "myenv"

python_package_manager:
  type: str
  help: "Python package manager to use in the development environment:"
  choices:
    "uv - declarative + reproducible, can also function as pip replacement": uv
    "pixi - declarative + reproducible, multi-language + multi-env": pixi
    "micromamba - conda drop-in replacement, multi-language + multi-env": micromamba
    "pip": pip
  default: "{{ _python_package_manager_default }}"

framework:
  type: str
  help: "Choose the framework for your develpment environment:"
  choices: |
    {% if python_package_manager == 'uv' or python_package_manager == 'pip' %}
    devenv (recommended): devenv
    {% endif %}
    {% if python_package_manager == 'micromamba' or python_package_manager == 'pixi' or python_package_manager == 'uv' %}
    fhs: fhs
    {% endif %}
  default: "{% if python_package_manager == 'uv' or python_package_manager == 'pip' %}devenv{% else %}fhs{% endif %}"
  when: python_package_manager == 'uv'

interface:
  type: str
  help: "Do you want to use the devenv cli or a flake?"
  choices:
    cli: cli
    flake: flake
  default: cli
  when: false

python_version:
  type: str
  help: "Python version to use in the development environment:"
  default: "3.12"
  when: "{{ not _python_project_file_exists or framework == 'devenv'}}"

declarative_python_environment:
  type: bool
  help: "Do you want to automatically create, install and activate your python environment when activating your development shell?"
  default: true


python_packages:
  type: str
  help: "Enter a comma- or space-separated list of required Python packages (e.g., requests, rich, typer){%- if python_package_manager != 'micromamba' and python_package_manager != 'pip' and python_package_manager != 'pixi' %}. If you want to install flash attention, do NOT add it here, but answer yes to the next question.{%- endif %}"
  when: "{{ declarative_python_environment and not _python_project_file_exists}}"
  default: ""

cudaSupport:
  type: bool
  help: "Do you want to install CUDA support?"
  default: true

install_flash_attention:
  type: bool
  help: "Do you want to install flash attention?"
  default: false
  when: "{{ declarative_python_environment and python_package_manager != 'micromamba' and python_package_manager != 'pixi' and cudaSupport }}"

shell:
  type: str
  help: "Shell to use in the development environment:"
  choices:
    bash: bash
    zsh: zsh
    fish: fish
  default: zsh
  when: "{{ framework == 'fhs' }}"

project_description:
  type: str
  help: "Description of the environment:"
  default: "A development environment using {{ framework }} with {{ python_package_manager }}."
  when: false

codeserver:
  type: bool
  help: "Do you want to install OpenVSCode Server?"
  default: false
  when: "{{ framework == 'fhs' }}"

absolute_paths:
  type: bool
  help: "Do you want to use absolute paths for the python environment? Not recommended if you plan on sharing your project."
  default: false
  when: "{{ framework == 'fhs' and declarative_python_environment }}"

stable:
  type: bool
  help: "Do you want to use a tested version of the environment? This will use a locked version of nixpkgs and other dependencies."
  default: true
  when: "{{ framework == 'devenv' }}"

i_know_what_i_am_doing:
  type: bool
  help: "I know what I am doing (you probably don't)"
  choices:
    not really: false
    💯 🤪: true
  default: false

_skip_if_exists:
  - pyproject.toml
  - environment.yml
  - requirements.txt

_subdirectory: templates/{{ framework }}

_message_before_copy: |

  Answer a quick few questions to hopefully solve your nix+python troubles! 

_message_after_copy: |

  🚀 Environment {{project_name}} created successfully! 🚀

  To get started, follow these steps:

    1. Change into the project directory

       $ cd {{ _copier_conf.dst_path.as_posix() }}
    {% if framework == 'devenv' %}
    2. Allow direnv to load your project environment

       $ direnv allow

    3. Use {{ python_package_manager }} to install your python packages
    {% if not i_know_what_i_am_doing %}
    4. Figure out how to get rid of the cow 😜
    {%- endif %}
    {% elif framework == 'fhs' %}
    2. Enter the environment

       $ nix develop
    
    3. Use {{ python_package_manager }} to install your python packages
    {% if not i_know_what_i_am_doing %}
    4. Check out the _README.md file for more information on how to use the environment.
    {%- endif %}
    {%- endif %}

_message_after_update: |

  Environment updated! ✅️

_tasks:
  - when: "{{ _copier_operation == 'copy' }}"
    command: |
      git --version
      if ! command -v git >/dev/null 2>&1; then
        echo "Git is not installed. Skipping git add."
        exit 0
      fi

      echo "Initializing git repository..."
      git init

      echo "Staging files..."
      {%- if framework == 'devenv' %}
      git add devenv.nix .envrc{%- if stable %} devenv.lock{%- endif %}
      {%- elif framework == 'fhs' %}
      git add flake.nix
      {%- endif %}
