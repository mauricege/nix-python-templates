project_name:
  type: str
  help: "Name of the environment:"
  default: "myenv"

python_package_manager:
  type: str
  help: "Python package manager to use in the development environment:"
  choices:
    "uv - declarative + reproducible, can also function as pip replacement": uv
    "pixi - declarative + reproducible, multi-language + multi-env": pixi
  default: "{{ _python_package_manager_default or 'uv' }}"

framework:
  type: str
  help: "Choose the framework for your develpment environment:"
  choices: |
    {% if python_package_manager == 'uv' or python_package_manager == 'pip' %}
    devenv (recommended): devenv
    {% endif %}
    {% if python_package_manager == 'pixi' or python_package_manager == 'uv' %}
    nix-pyllow (make python "just work"): pyllow
    {% endif %}
  default: "{% if python_package_manager == 'uv' or python_package_manager == 'pip' %}devenv{% else %}pyllow{% endif %}"
  when: "{{python_package_manager == 'uv' }}"

interface:
  type: str
  help: "Do you want to use the devenv cli or a flake?"
  choices:
    cli: cli
    flakes - use this on (HPC) clusters: flake
  default: flake
  when: "{{ framework == 'devenv' }}"

pyllow_backend:
  type: str
  help: "Choose the backend for pyllow:"
  choices:
    fhs: fhs
    nix-ld - needs to be installed on your NixOS system: nix-ld
  default: "{{ _pyllow_backend_default or 'fhs' }}"
  when: "{{ framework == 'pyllow' }}"

python_version:
  type: str
  help: "Python version to use in the development environment:"
  default: "3.12"
  when: "{{ _python_project_file_exists != true and framework == 'devenv'}}"

declarative_python_environment:
  type: bool
  help: "Do you want to couple your {{ framework }} and {{ python_package_manager }} environments? (recommended)"
  default: "{{ framework == 'devenv'}}"
  when: "{{ framework == 'fhs'}}"

python_packages:
  type: str
  help: "Additional python packages to install (space-separated):"
  default: ""
  when: false

install_flash_attention:
  type: bool
  help: "Do you want to install flash attention?"
  default: false
  when: "{{ declarative_python_environment == true and python_package_manager != 'micromamba' and python_package_manager != 'pixi' }}"

cudaSupport:
  type: bool
  help: "Do you want to install CUDA support?"
  default: false
  when: "{{ declarative_python_environment and python_package_manager == 'pixi' }}"

shell:
  type: str
  help: "Shell to use in the development environment:"
  choices:
    bash: bash
    zsh: zsh
    fish: fish
  default: zsh
  when: "{{ framework == 'fhs' }}"

project_description:
  type: str
  help: "Description of the environment:"
  default: "A development environment using {{ framework }} with {{ python_package_manager }}."
  when: false

codeserver:
  type: bool
  help: "Do you want to install OpenVSCode Server?"
  default: false
  when: "{{ framework == 'fhs' }}"

absolute_paths:
  type: bool
  help: "Do you want to decouple your environment from the project path? (not recommended)"
  default: false
  when: "{{ framework == 'fhs' and declarative_python_environment == true}}"

stable:
  type: bool
  help: "Do you want to use a tested version of the environment?"
  default: true
  when: false

i_know_what_i_am_doing:
  type: bool
  help: "I know what I am doing (you probably don't)"
  choices:
    not really: false
    💯 🤪: true
  default: false

_skip_if_exists:
  - pyproject.toml
  - environment.yml
  - requirements.txt
  - pixi.toml

_subdirectory: templates/{{ framework }}

_message_before_copy: |

  Answer a quick few questions to solve your nix+python troubles! 

_message_after_copy: |

  🚀 Environment {{project_name}} created successfully! 🚀

  To get started, follow these steps:

    1. Change into the project directory

       $ cd {{ _copier_conf.dst_path.as_posix() }}
    {% if framework == 'devenv' %}
    2. Allow direnv to load your project environment

       $ direnv allow

    3. Use {{ python_package_manager }} to install your python packages
    {% if not i_know_what_i_am_doing %}
    4. Figure out how to get rid of the cow 😜
    {%- endif %}
    {% elif framework == 'fhs' %}
    2. Enter the environment

       $ nix develop
    
    3. Use {{ python_package_manager }} to install your python packages
    {% if not i_know_what_i_am_doing %}
    4. Check out the _README.md file for more information on how to use the environment.
    {%- endif %}
    {% elif framework == 'pyllow' %}
    2. Allow direnv to load your project environment

       $ direnv allow
    
    3. Use {{ python_package_manager }} to create projects, environments and install your python packages, e.g.,

       $ {{ python_package_manager }} init
       $ {{ python_package_manager }} add numpy pandas
    {% if not i_know_what_i_am_doing %}
    4. Check out the _README.md file for more information on how to use the environment.
    {%- endif %}
    {%- endif %}

_message_after_update: |

  Environment updated! ✅️

_tasks:
  - when: "{{ _copier_operation == 'copy' }}"
    command: |
      git --version
      if ! command -v git >/dev/null 2>&1; then
        echo "Git is not installed. Skipping git add."
        exit 0
      fi

      echo "Initializing git repository..."
      git init

      echo "Staging files..."
      {%- if framework == 'devenv' and interface == 'cli' %}
      git add devenv.nix .envrc{%- if stable %} devenv.lock{%- endif %}
      {%- elif framework == 'devenv' and interface == 'flake' %}
      git add .nix/flake.nix .envrc{%- if stable %} .nix/flake.lock{%- endif %}
      {%- if stable == false %}
      pushd $(pwd)
      cd .nix
      nix flake update
      popd
      {%- endif %}
      {%- elif framework == 'fhs' or framework == 'pyllow' %}
      git add flake.nix {% if stable %}flake.lock{%- endif %}
      {%- endif %}
