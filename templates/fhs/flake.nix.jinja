{
  description = ''FHS-compatible python development shell with {{ python_package_manager }}{%- if cudaSupport %} and CUDA{%- endif %}. Should make things "just work" for most users.'';

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    flake-utils.url = "github:numtide/flake-utils";
  };

  outputs = {
    self,
    nixpkgs,
    flake-utils,
    ...
  }:
    flake-utils.lib.eachSystem ["x86_64-linux" "aarch64-linux"] (
      system: let
        pkgs = import nixpkgs {
          inherit system;
          config.allowUnfree = true;
          cudaSupport = {{ cudaSupport|string|lower }};
        };
        {%- if python_package_manager == "micromamba" %}
        pythonInstall = ''
           if micromamba env list | grep -qw "$MAMBA_ROOT_PREFIX/envs/{{ project_name }}"; then
            echo "Updating environment {{ project_name }}..."
            micromamba install -q -y -f environment.yml
          else
            echo "Creating environment {{ project_name }}..."
            micromamba create -q -y -f environment.yml
          fi
        '';
        {{ python_package_manager }}Hook = ''
          {%- if shell == "fish" %}
          eval $(micromamba shell hook --shell=fish)
          {%- elif shell == "zsh" %}
          eval "$(micromamba shell hook --shell={{ shell }} | sed 's/complete / # complete/g')"
          {%- elif shell == "bash" %}
          eval "$(micromamba shell hook --shell=posix)"
          {%- endif %}
          '';
        pythonActivate = ''
          micromamba activate {{ project_name }}
        '';
        {%- elif python_package_manager == "uv" %}
        pythonInstall = ''
          uv venv --python {{ python_version }} --allow-existing --managed-python
          uv sync{%- if install_flash_attention %} --extra flash_attention_build{% endif %}
          {%- if install_flash_attention %}
          # we need two uv syncs here - first to install flash-attention's build dependencies and then to compile it
          uv sync --extra flash_attention_build --extra flash_attention_compile
          {%- endif %}
        '';
        {{ python_package_manager }}Hook = ''
        ''; # Any additional {{ python_package_manager }} shell hook commands can be added here - should not be necessary
        pythonActivate = "source $UV_PROJECT/.venv/bin/activate{%- if shell == 'fish'%}.fish{%- endif %}";
        {%- elif python_package_manager == "pixi" %}
        pythonInstall = "";
        {{ python_package_manager }}Hook = ''
        ''; # Any additional {{ python_package_manager }} shell hook commands can be added here - should not be necessary
        {%- if shell == "fish" %}
        pythonActivate = ''
          eval $(pixi shell-hook -s {{ shell }} --manifest-path {{ _copier_conf.dst_path.as_posix() if not absolute_paths else '$PWD' }})
        '';
        {%- elif shell == "zsh" or shell == "bash" %}
        pythonActivate = ''
          eval "$(pixi shell-hook -s {{ shell }} --manifest-path {{ _copier_conf.dst_path.as_posix() if absolute_paths else '$PWD' }})"
        '';
        {%- endif %}
        {%- endif %}
      in {
        devShells = rec {
          {{ project_name }} = self.packages.${system}.default.env.overrideAttrs (old: {
            name = "{{ project_name }}";
          });
          default = {{ project_name }};
        };
        packages = rec {
          {{ project_name }}-fhs = pkgs.buildFHSEnv (pkgs.appimageTools.defaultFhsEnvArgs
            // {
              name = "{{ project_name }}-fhs";
              targetPkgs = pkgs: (with pkgs; [
                {{ python_package_manager }}

                # makes shell more pleasant to use
                fzf
                zoxide

                {%- if codeserver %}
                # code server inside fhs
                openvscode-server
                {%- endif %}

                # shells
                {{ shell }}
              ]);
              profile = ''
                {%- if cudaSupport %}
                export CUDA_PATH="${pkgs.cudatoolkit}"
                {%- endif %}
                export EXTRA_CCFLAGS="-I/usr/include"
                {%- if python_package_manager == 'micromamba' %}
                export MAMBA_ROOT_PREFIX="''${MAMBA_ROOT_PREFIX:-{{ _copier_conf.dst_path.as_posix() if absolute_paths else '$PWD' }}/.micromamba}"
                {%- endif %}
                {%- if python_package_manager == 'uv' %}
                export UV_PROJECT="{{ _copier_conf.dst_path.as_posix() if absolute_paths else '$PWD' }}"
                {%- endif %}
                {%- if shell == 'zsh' or shell == 'bash '%}
                ${{ '{' ~  python_package_manager }}Hook}
                {%- endif %}
                {%- if declarative_python_environment %}
                ${pythonInstall}
                {%- if shell == "zsh" or shell == "bash" %}
                ${pythonActivate}
                {%- endif %}
                {%- endif %}
              '';
              runScript = ''{%- if shell == "fish" %}fish -C "${builtins.replaceStrings ["\n"] ["; "] ({{ python_package_manager }}Hook{%- if declarative_python_environment %} + pythonActivate{%- endif %})}"{%- elif shell == "zsh" or shell == "bash" %}{{ shell }}{%- endif %}'';
            });
          default = {{ project_name }}-fhs;
        };
      }
    );
}
