{% extends pathjoin("includes", "_README.md.jinja") %}

{% block description %}
This folder contains a reproducible development shell powered by [devenv](https://devenv.sh/). It provides a consistent approach to managing system packages, language runtimes, and Python dependencies via {%- if python_package_manager == 'uv'%}[uv](https://github.com/astral-sh/uv){%- elif python_package_manager == 'pip' %}pip{% endif %}.
{% endblock %}

{% block features %}
- Isolated, declarative and reproducible shell environment
- Easily extendable with system packages and languages
- {%- if python_package_manager == 'uv' %}Fast{% endif %} Python dependency management via `{{ python_package_manager }}`{%- if python_package_manager == 'uv' %} and `pyproject.toml`/`{{ python_package_manager }}.lock`{% endif %}
- Automatic environment activation with [direnv](https://direnv.net/)
{% endblock %}

{% block getting_started %}
1. **Install [Nix](https://nixos.org/download.html){%- if interface == 'cli' %}, [devenv](https://devenv.sh/getting-started/){%- endif %} and [direnv](https://direnv.net/docs/installation.html)**
2. Allow direnv in this directory (run once):

    ```sh
    direnv allow
    ```
{% endblock %}

{% block extending_environment %}
### Add System Packages

Edit `{%- if interface == 'flake' %}.nix/{%- endif %}devenv.nix` and add packages to the `packages` list:

```nix
packages = with pkgs; [
  git
  curl
  # Add more packages here
];
```
{% if interface == 'cli' %}
Find packages provided by your inputs (`devenv.yaml`) with `devenv search`. This is slow on the first run, as it has to git-checkout the revision of nixpkgs that your `devenv.lock` points to. You can also utilize `nix-search` a CLI for [search.nixos.org](https://search.nixos.org) - this searches the current maintained nix-channels.
{% else %}
You can use the [NixOS search](https://search.nixos.org/packages) to find packages (or the CLI `nix-search`). Just copy the package name and add it to the `packages` list.
{% endif %}
### Enable Languages

Enable language support by adding to the `languages` section:

```nix
languages.python.enable = true;
languages.nodejs.enable = true;
# Add more languages as needed
```

For a comprehensive list of available language options and their configuration details,
please refer to the official devenv documentation at: <https://devenv.sh/languages/>
{% endblock %}

{% block reusing_environment %}
While I strongly recommend against sharing a development environment across projects - you will lose out on reproducibility and version control, and you might break your older code with future updates to the environment - you can still achieve this by copying over `.envrc.local`:

```sh
cp .envrc.local /your/new/project/.envrc
```

This will source the environment living in your current directory from your new project's root folder.
{% endblock %}

{% block resources %}
- [devenv documentation](https://devenv.sh/)
{%- if python_package_manager == 'uv' %}
- [uv documentation](https://docs.astral.sh/uv/)
{%- endif %}
- [direnv documentation](https://direnv.net/)
{%- if python_package_manager == 'uv' %}
- [flash-attn via uv](https://docs.astral.sh/uv/concepts/projects/config/#build-isolation)
{%- endif %}
{% endblock %}

{% block additional %}
### How do I get rid of the cow?

If you are confident that you will remember where to find this readme, you can disable the cowsay output in `{%- if interface == 'flake' %}.nix/{%- endif %}devenv.nix` by modifying `enterShell`:

```nix
enterShell = ''
    # Just remove the line below if you don't want to see the cow
    ${pkgs.cowsay}/bin/cowsay "If you have any questions about installing packages, please check the _README.md file in this directory! (Also if you want to get rid of the cow ;P)" | ${pkgs.lolcat}/bin/lolcat
'';
```
{% endblock %}
